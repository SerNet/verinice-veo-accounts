image: gradle:8.1.1-jdk17-alpine

variables:
  ORG_GRADLE_PROJECT_ci: 'true'
  CI_DEBUG_SERVICES: "true"
  PROXY: $HTTPS_PROXY_HOST

stages:
  - build
  - check
  - docker_image
  - integration_test
  - deployment

before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

build:
  stage: build
  script:
    - env
    - gradle -i -PciBuildNumer=$CI_PIPELINE_ID -PciJobName=$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME build -x check
    - echo "PROJECT_VERSION=$(./gradlew -q properties --property version| awk '/^version:/ {print $2}')" >> variables.env
  artifacts:
    expire_in: 1 week
    reports:
      dotenv: variables.env
    paths:
      - build/libs
  cache:
    - key: gradle
      paths:
        - .gradle
    - key: $CI_PROJECT_PATH
      paths:
        - build
      policy: push

test:
  stage: check
  script: gradle -i test
  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml
  cache:
    - key: gradle
      paths:
        - .gradle
    - key: $CI_PROJECT_PATH
      paths:
        - build
      policy: pull

check:
  stage: check
  script:
    - gradle -i check -x test
  cache:
    - key: gradle
      paths:
        - .gradle
    - key: $CI_PROJECT_PATH
      paths:
        - build
      policy: pull


check_license:
  stage: check
  script:
    - gradle -i generateLicenseReport
    - git diff --exit-code --ignore-matching-lines='This report was generated at'
    - if [ $? -ne 0 ]; then echo "LICENSE-3RD-PARTY.txt is not up to date, please re-run ./gradlew generateLicenseReport"; exit 1; fi
  cache:
    - key: gradle
      paths:
        - .gradle
    - key: $CI_PROJECT_PATH
      paths:
        - build
      policy: pull


docker_image:
  stage: docker_image
  needs:
   - build
  image:
    name: gcr.io/kaniko-project/executor:v1.11.0-debug
    entrypoint: [""]

  variables:
    IMAGE_NAME: eu.gcr.io/veo-projekt/veo-accounts
    # this does not work in Gitlab < 15.7, so we need the before_script workaround
    # GOOGLE_APPLICATION_CREDENTIALS: $GCR_ACCESS_TOKEN

  before_script:
    - export GOOGLE_APPLICATION_CREDENTIALS=${GCR_ACCESS_TOKEN}

  script:
    - |-
      DESTINATION_ARG="--destination $IMAGE_NAME:gitlab-git-${CI_COMMIT_SHA} --destination $IMAGE_NAME:pipeline-id-${CI_PIPELINE_ID}"
      if [ -n "$CI_COMMIT_TAG" ]; then export DESTINATION_ARG="$DESTINATION_ARG --destination $IMAGE_NAME:$CI_COMMIT_TAG";
        if [ "$CI_COMMIT_REF_NAME" = "main" ]; then export DESTINATION_ARG="$DESTINATION_ARG --destination $IMAGE_NAME:latest"; fi;
      fi;
      if [ "$CI_COMMIT_REF_NAME" = "develop" ]; then export DESTINATION_ARG="$DESTINATION_ARG --destination $IMAGE_NAME:develop"; fi;
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      $DESTINATION_ARG
      --build-arg VEO_ACCOUNTS_VERSION="${PROJECT_VERSION}"
      --label org.opencontainers.image.version="${PROJECT_VERSION}"
      --label org.opencontainers.image.revision=${CI_COMMIT_SHA}

http_rest_tests:
  stage: integration_test
  services:
  - name: eu.gcr.io/veo-projekt/veo-accounts:pipeline-id-${CI_PIPELINE_ID}
    alias: veo-accounts
    variables:
      VEO_ACCOUNTS_KEYCLOAK_MAILING_ENABLED: 'false'
      VEO_ACCOUNTS_RABBITMQ_SUBSCRIBE: 'true'
      VEO_CORS_ORIGINS: 'https://*.verinice.example, https://frontend.somewhereelse.example'
      # FIXME: Read this from CI/CD settings
      JDK_JAVA_OPTIONS: -Dhttp.proxyHost=$PROXY -Dhttp.proxyPort=3128 -Dhttps.proxyHost=${PROXY} -Dhttps.proxyPort=3128 -Dhttps.proxySet=true -Dhttp.proxySet=true
  variables:
    VEO_RESTTEST_BASEURL: http://veo-accounts:8099
    VEO_ACCOUNTS_KEYCLOAK_PROXYHOST: $PROXY
    VEO_ACCOUNTS_KEYCLOAK_CLIENTS_SERVICE_SECRET: $KEYCLOAK_CLIENTS_SERVICE_SECRET
    VEO_ACCOUNTS_RABBITMQ_SUBSCRIBE: 'false'
    SPRING_RABBITMQ_HOST: $RABBITMQ_HOST
    SPRING_RABBITMQ_USERNAME: $RABBITMQ_USERNAME
    SPRING_RABBITMQ_PASSWORD: $RABBITMQ_PASSWORD
    VEO_ACCOUNTS_RABBITMQ_QUEUES_VEOSUBSCRIPTIONS: VEO_ACCOUNTS_REST_TEST_VEOSUBSCRIPTIONS_PIPELINE_${CI_PIPELINE_ID}
    VEO_ACCOUNTS_RABBITMQ_ROUTING_KEY_PREFIX: VEO_TEST_PIPELINE_${CI_PIPELINE_ID}.
    VEO_ACCOUNTS_AUTH_APIKEYS_CLIENTINIT: $CLIENT_INIT_API_KEY
  script:
    - gradle -i -Dhttp.nonProxyHosts="localhost|veo-accounts" -PciBuildNumer=$CI_PIPELINE_ID -PciJobName=$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME restTest
  artifacts:
    when: always
    reports:
      junit: build/test-results/restTest/*.xml
  cache:
    - key: gradle
      paths:
        - .gradle
    - key: $CI_PROJECT_PATH
      paths:
        - build
      policy: pull

trigger_deployment:
  stage: deployment
  only:
    - develop
    - main
  image: 'curlimages/curl:latest'
  script:
    - curl -i -k -X POST --user gitlab:$JENKINS_API_TOKEN https://bob.int.sernet.de:8443/job/verinice-veo-deployment/job/master/build
